<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:System="clr-namespace:System;assembly=mscorlib" 
                    xmlns:local="clr-namespace:EIEx_App" 
                    >

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/EIEx_App;component/Code/Vue/BaseValues.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    
    <!--<System:Double x:Key="DefaultMarginBase">5</System:Double>
    <System:Double x:Key="SmallMarginBase">1</System:Double>
    <System:Double x:Key="EpaisseurBordureContainerBase">0.5</System:Double>-->

    <!--#region Divers-->

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>

    <!--#region Template icônes (pour boutons ou autres) -->

    <DataTemplate x:Key="Valider" >
        <Viewbox>
            <Canvas x:Name="Calque_1" Width="128" Height="128" Canvas.Left="0" Canvas.Top="0">
                <Path Width="77.1835" Height="55.5035" Canvas.Left="24.0874" Canvas.Top="37.4375" 
                      Stretch="Fill" 
                      StrokeThickness="20" 
                      StrokeStartLineCap="Round" StrokeEndLineCap="Round" StrokeLineJoin="Round" 
                      Stroke="{Binding Foreground, FallbackValue=#FF9ACD32, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Control}}}"
                      Data="F1 M 34.0874,64.8576L 54.7124,82.9409L 91.2708,47.4375"
                      />
            </Canvas>
        </Viewbox>
    </DataTemplate>

    <DataTemplate x:Key="Ajouter" >
        <Viewbox x:Name="Group" >
            <Canvas x:Name="Calque_1" Width="128" Height="128" Canvas.Left="0" Canvas.Top="0">
                <Canvas Width="93" Height="93" Canvas.Left="17.6042" Canvas.Top="17.6042">
                    <Path x:Name="Line" 
                      Width="93" Height="20" Canvas.Left="1.90735e-006" Canvas.Top="36.5" 
                      Stretch="Fill" 
                      StrokeThickness="20" StrokeStartLineCap="Round" StrokeEndLineCap="Round" StrokeLineJoin="Round" 
                      Stroke="{Binding Foreground, FallbackValue=#FF9ACD32, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Control}}}"
                      Data="F1 M 10,46.5L 83,46.5"
                      />
                    <Path x:Name="Line_0" 
                      Width="20" Height="93" Canvas.Left="36.5" Canvas.Top="0" 
                      Stretch="Fill" 
                      StrokeThickness="20" StrokeStartLineCap="Round" StrokeEndLineCap="Round" StrokeLineJoin="Round" 
                      Stroke="{Binding Foreground, FallbackValue=#FF9ACD32, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Control}}}"
                      Data="F1 M 46.5,83L 46.5,10"
                      />
                </Canvas>
            </Canvas>
        </Viewbox>
    </DataTemplate>

    <DataTemplate x:Key="Annuler" >
        <Viewbox x:Name="Group" >
            <Canvas x:Name="Calque_1" Width="128" Height="128" Canvas.Left="0" Canvas.Top="0">
                <Canvas Width="59.875" Height="59.875" Canvas.Left="34.1667" Canvas.Top="34.1667"
                        >
                    <Path x:Name="Line1" 
                          Width="59.875" Height="59.875" Canvas.Left="7.62939e-006" Canvas.Top="1.52588e-005" 
                          Stretch="Fill" 
                          StrokeThickness="20" StrokeStartLineCap="Round" StrokeEndLineCap="Round" StrokeLineJoin="Round" 
                          Stroke="{Binding Foreground, FallbackValue=#FF9ACD32, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Control}}}"
                          Data="F1 M 10,10L 49.875,49.875"
                          />
                    <Path x:Name="Line2" 
                          Width="59.875" Height="59.875" Canvas.Left="0" Canvas.Top="0" 
                          Stretch="Fill" 
                          StrokeThickness="20" StrokeStartLineCap="Round" StrokeEndLineCap="Round" StrokeLineJoin="Round" 
                          Stroke="{Binding Foreground, FallbackValue=#FF9ACD32, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Control}}}"
                          Data="F1 M 10,49.875L 49.875,10"
                          />
                </Canvas>
            </Canvas>

        </Viewbox>
    </DataTemplate>

    <DataTemplate x:Key="GoTo" >
        <Viewbox>
            <Canvas Background="{x:Null}" Width="20" Height="20" >
                <Ellipse x:Name="ellipse" 
                         Height="13.167" Canvas.Left="2.042" Canvas.Top="2.042" Width="13.167"         				
                         StrokeThickness="2"
                         Stroke="{Binding Foreground, FallbackValue=Red, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Control}}}"
                         />
                <Path Data="M12.625,12.125 L17.861424,17.361424" Height="5.514" Canvas.Left="11.625" Stretch="Fill" Stroke="{Binding Stroke, ElementName=ellipse}" StrokeThickness="2" Canvas.Top="11.125" Width="5.514" StrokeEndLineCap="Round"/>
            </Canvas>
        </Viewbox>
    </DataTemplate>

    <DataTemplate x:Key="ASuivre" >
        <Viewbox x:Name="Group" >
            <Canvas x:Name="Calque_1" Width="128" Height="128" Canvas.Left="0" Canvas.Top="0">
                <Canvas Width="70.7259" Height="20.1666" Canvas.Left="28.5329" Canvas.Top="54.0209">
                    <Ellipse x:Name="Ellipse_0" 
                             Width="19.875" Height="20" Canvas.Left="25.4254" Canvas.Top="0.0625076" 
                             Stretch="Fill" 
                             Fill="{Binding Foreground, FallbackValue=#FF9ACD32, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Control}}}"
                             />
                    <Ellipse x:Name="Ellipse_1" 
                             Width="19.875" Height="20" Canvas.Left="0" Canvas.Top="0" 
                             Stretch="Fill" 
                             Fill="{Binding Foreground, FallbackValue=#FF9ACD32, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Control}}}"
                             />
                    <Ellipse x:Name="Ellipse_2" 
                             Width="19.875" Height="20" Canvas.Left="50.8508" Canvas.Top="0.166664" 
                             Stretch="Fill" 
                             Fill="{Binding Foreground, FallbackValue=#FF9ACD32, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Control}}}"
                             />
                </Canvas>
            </Canvas>
        </Viewbox>
    </DataTemplate>

    <DataTemplate x:Key="Reset" >
        <DataTemplate.Resources>
            <Style TargetType="Path">
                <Setter Property="Stroke" Value="{Binding Foreground, FallbackValue=#FF9ACD32, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Control}}}"/>
                <Setter Property="StrokeStartLineCap" Value="Round"/>
                <Setter Property="StrokeEndLineCap" Value="Round"/>
                <Setter Property="StrokeLineJoin" Value="Round"/>
                <Setter Property="StrokeThickness" Value="20"/>
            </Style>
        </DataTemplate.Resources>
        <Viewbox x:Name="Group" >
            <Canvas x:Name="Calque_1" Width="128" Height="128" Canvas.Left="0" Canvas.Top="0">
                <Canvas Width="93" Height="93" Canvas.Left="17.6042" Canvas.Top="17.6042">
                    <Path x:Name="Line" 
                      Width="93" Height="20" Canvas.Left="1.90735e-006" Canvas.Top="36.5" 
                      Stretch="Fill" 
                      Data="F1 M 10,46.5L 83,46.5"
                      />
                    <Path x:Name="Line_0" 
                      Width="20" Height="93" Canvas.Left="36.5" Canvas.Top="0" 
                      Stretch="Fill" 
                      Data="F1 M 46.5,83L 46.5,10"
                      />
                </Canvas>

                <Canvas Width="71.6188" Height="71.6188" Canvas.Left="28.2948" Canvas.Top="28.2948">
                    <Path x:Name="Line_2" 
                          Width="71.6188" Height="71.6188" Canvas.Left="-1.90735e-006" Canvas.Top="1.52588e-005" 
                          Stretch="Fill" 
                          Data="F1 M 61.6188,10L 10,61.6188"
                          />
                    <Path x:Name="Line_3" 
                          Width="71.6188" Height="71.6188" Canvas.Left="9.53674e-006" Canvas.Top="0" 
                          Stretch="Fill" 
                          Data="F1 M 10,10L 61.6188,61.6188"
                          />
                </Canvas>
            </Canvas>
        </Viewbox>
    </DataTemplate>

    <DataTemplate x:Key="Suivant" >
        <DataTemplate.Resources>
            <Style TargetType="Polygon">
                <Setter Property="Stroke" Value="{Binding Foreground, FallbackValue=#FF9ACD32, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Control}}}"/>
                <Setter Property="Fill" Value="{Binding Stroke, RelativeSource={RelativeSource Self}}"/>
                <Setter Property="StrokeStartLineCap" Value="Round"/>
                <Setter Property="StrokeEndLineCap" Value="Round"/>
                <Setter Property="StrokeLineJoin" Value="Round"/>
                <Setter Property="StrokeThickness" Value="20"/>
            </Style>
        </DataTemplate.Resources>
        <Viewbox x:Name="Group" >
            <Canvas x:Name="Calque_1" Width="128" Height="128" VerticalAlignment="Center" HorizontalAlignment="Center">
                <Canvas Width="93" Height="93" VerticalAlignment="Center" HorizontalAlignment="Center">
                    <Polygon x:Name="Triangle" VerticalAlignment="Center" HorizontalAlignment="Center"
                             Canvas.Left="40" Canvas.Top="17"
                             Stretch="Fill"
                             Points="0,0 45,36, 0,72"/>
                </Canvas>
            </Canvas>
        </Viewbox>
    </DataTemplate>

    <!--#endregion-->

    <!--#endregion-->

    <!--#region Valeurs de base--><!--

    <Thickness x:Key="EpaisseurBordureContainer" 
               Left="{StaticResource EpaisseurBordureContainerBase}" 
               Top="{StaticResource EpaisseurBordureContainerBase}" 
               Right="{StaticResource EpaisseurBordureContainerBase}" 
               Bottom="{StaticResource EpaisseurBordureContainerBase}"/>

    <Thickness x:Key="DefaultMargin" Left="0" Top="0" Right="{StaticResource DefaultMarginBase}" Bottom="{StaticResource DefaultMarginBase}"/>

    <Thickness x:Key="DefaultFullMargin" Left="{StaticResource DefaultMarginBase}" Top="{StaticResource DefaultMarginBase}" Right="{StaticResource DefaultMarginBase}" Bottom="{StaticResource DefaultMarginBase}"/>

    <Thickness x:Key="SmallMargin" Left="0" Top="0" Right="{StaticResource SmallMarginBase}" Bottom="{StaticResource SmallMarginBase}"/>

    <Thickness x:Key="DefaultPadding" Left="{StaticResource DefaultMarginBase}" Top="{StaticResource DefaultMarginBase}" Right="0" Bottom="0"/>

    <Thickness x:Key="DefaultFullPadding" Left="{StaticResource DefaultMarginBase}" Top="{StaticResource DefaultMarginBase}" Right="{StaticResource DefaultMarginBase}" Bottom="{StaticResource DefaultMarginBase}"/>

    --><!--#endregion-->

    <!--#region Couleurs générales--><!--

    <SolidColorBrush x:Key="{x:Static SystemColors.HighlightBrushKey}" Color="DarkGray"/>

    <SolidColorBrush x:Key="WritableBkg" Color="#FFDFDFDF"/>
    <SolidColorBrush x:Key="WritableFocusBkgd" Color="White"/>
    <SolidColorBrush x:Key="ClearTextBrush" Color="#FFBDBCBC"/>
    <SolidColorBrush x:Key="DarkTextBrush" Color="Black"/>
    <SolidColorBrush x:Key="DarkBackground" Color="#FF434343"/>

    <Color x:Key="CouleurActionPossible">#FF0088CC</Color>
    --><!--Bleu--><!--
    <Color x:Key="CouleurActionPossible_Foncée">#005A87</Color>
    --><!--Bleu--><!--
    <Color x:Key="CouleurActionRequise">#FCCD20</Color>
    --><!--Jaune--><!--
    <Color x:Key="CouleurActionRequise_Foncée">#D7AA03</Color>
    --><!--Jaune--><!--

    <Color x:Key="CouleurContourContainer">#FFFFFF98</Color>

    <Color x:Key="SelectedItemBkgnd">Orange</Color>
    --><!--Bleu--><!--

    <SolidColorBrush x:Key="ContourContainer" Color="{StaticResource CouleurContourContainer}"/>
    <SolidColorBrush x:Key="Contour" Color="#66000000"/>
    <SolidColorBrush x:Key="ContourLéger" Color="#33FFFFFF"/>

    <SolidColorBrush x:Key="Fond" Color="#FF515151"/>

    --><!--#endregion-->

    <!--#region styles par défaut des contrôles-->

    <!--#region Containers-->

    <Style TargetType="Border">
        <Setter Property="Padding" Value="{StaticResource DefaultPadding}"/>
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ContourContainer}"/>
        <Setter Property="BorderThickness" Value="{StaticResource EpaisseurBordureContainer}"/>
    </Style>

    <!--#region GrouBox-->

    <BorderGapMaskConverter x:Key="BorderGapMaskConverter"/>

    <Style TargetType="{x:Type GroupBox}">
        <Setter Property="Padding" Value="{StaticResource DefaultPadding}"/>
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ContourContainer}"/>
        <Setter Property="BorderThickness" Value="{StaticResource EpaisseurBordureContainer}"/>
        <Setter Property="Foreground" Value="{DynamicResource ClearTextBrush}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type GroupBox}">
                    <Grid SnapsToDevicePixels="true">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="6"/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="6"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="6"/>
                        </Grid.RowDefinitions>
                        <Border x:Name="Bdr_Background" Grid.Row="1" Grid.Column="0" Grid.RowSpan="3" Grid.ColumnSpan="4" 
                        		BorderBrush="Transparent" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="0" Background="{TemplateBinding Background}" />
                        <Border Grid.Row="1" Grid.RowSpan="3" Grid.ColumnSpan="4" 
                                    BorderBrush="{TemplateBinding BorderBrush}" CornerRadius="0" Background="{TemplateBinding Background}">
                            <Border.OpacityMask>
                                <MultiBinding ConverterParameter="7" Converter="{StaticResource BorderGapMaskConverter}">
                                    <Binding ElementName="Header" Path="ActualWidth"/>
                                    <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                    <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                </MultiBinding>
                            </Border.OpacityMask>
                            <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                                <Border />
                            </Border>
                        </Border>
                        <Border x:Name="Header" Grid.Column="1" Padding="3,1,3,0" Grid.Row="0" Grid.RowSpan="2">
                            <ContentPresenter TextElement.FontStyle="Italic" ContentSource="Header" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                        <ContentPresenter Grid.ColumnSpan="2" Grid.Column="1" Margin="{TemplateBinding Padding}" Grid.Row="2" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#region Expander-->
    <Style TargetType="Expander">
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="BorderBrush" Value="{StaticResource ContourContainer}"/>
        <Setter Property="BorderThickness" Value="{StaticResource EpaisseurBordureContainer}"/>
        <Setter Property="Foreground" Value="{DynamicResource ClearTextBrush}"/>
    </Style>
    <!--#endregion-->

    <!--#region TabControl-->

    <!--#region Couleurs pour TabControl-->
    <SolidColorBrush x:Key="TabItem.Static.Background" Color="#33FFFFFF"/>
    <SolidColorBrush x:Key="TabItem.Static.Border" Color="#ACACAC"/>
    <LinearGradientBrush x:Key="TabItem.MouseOver.Background" EndPoint="0,1" StartPoint="0,0">
        <GradientStop Color="#ECF4FC" Offset="0.0"/>
        <GradientStop Color="#DCECFC" Offset="1.0"/>
    </LinearGradientBrush>
    <SolidColorBrush x:Key="TabItem.MouseOver.Border" Color="#7EB4EA"/>
    <SolidColorBrush x:Key="TabItem.Disabled.Background" Color="#F0F0F0"/>
    <SolidColorBrush x:Key="TabItem.Disabled.Border" Color="#D9D9D9"/>
    <SolidColorBrush x:Key="TabItem.Selected.Border" Color="#ACACAC"/>
    <SolidColorBrush x:Key="TabItem.Selected.Background" Color="#FFFFFF"/>
    <SolidColorBrush x:Key="TabControlBackground" Color="#FF434343"/>
    <!--#endregion-->

    <Style TargetType="TabControl">
        <Setter Property="Background" Value="{StaticResource Fond}"/>
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}"/>
        <Setter Property="Padding" Value="{StaticResource DefaultPadding}"/>
    </Style>

    <Style TargetType="{x:Type TabItem}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type TabControl}}}"/>
        <Setter Property="BorderBrush" Value="{StaticResource TabItem.Static.Border}"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="6,2,6,2"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                        <Border x:Name="mainBorder" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1,1,1,0" Background="{TemplateBinding Background}" Margin="0">
                            <Border x:Name="innerBorder" BorderBrush="{StaticResource TabItem.Selected.Border}" BorderThickness="1,1,1,0" Background="{TemplateBinding Background}" Margin="-1" Opacity="0"/>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"
                        		TextElement.Foreground="{StaticResource ClearTextBrush}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.MouseOver.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                            <Setter Property="Background" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Background}"/>
                            <Setter Property="BorderBrush" TargetName="mainBorder" Value="{StaticResource TabItem.Disabled.Border}"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="White"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter TargetName="mainBorder" Property="Background" Value="#FF626262"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Left"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,-2,0,-2"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,0,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,0,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Bottom"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,0,-2,-2"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,0,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,0,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Right"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="0,-2,-2,-2"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="0,1,1,1"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="0,1,1,1"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="false"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="true"/>
                                <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType={x:Type TabControl}}}" Value="Top"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Panel.ZIndex" Value="1"/>
                            <Setter Property="Margin" Value="-2,-2,-2,0"/>
                            <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                            <Setter Property="BorderThickness" TargetName="innerBorder" Value="1,1,1,0"/>
                            <Setter Property="BorderThickness" TargetName="mainBorder" Value="1,1,1,0"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--#endregion-->

    <!--#endregion-->

    <!--#region Contrôles de saisie -->

    <Style BasedOn="{StaticResource {x:Type CheckBox}}" TargetType="{x:Type CheckBox}">
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}"/>
        <Setter Property="Foreground" Value="{StaticResource ClearTextBrush}"/>
        <Setter Property="Background" Value="{StaticResource WritableBkg}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="{DynamicResource WritableFocusBkgd}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="Background" Value="{DynamicResource WritableFocusBkgd}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="RadioButton"  BasedOn="{StaticResource {x:Type RadioButton}}">
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}"/>
        <Setter Property="Foreground" Value="{StaticResource ClearTextBrush}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style TargetType="TextBox">
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}"/>
        <Setter Property="Background" Value="{StaticResource WritableBkg}"/>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="{DynamicResource WritableFocusBkgd}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="Background" Value="{DynamicResource WritableFocusBkgd}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="TextBlock"  BasedOn="{StaticResource {x:Type TextBlock}}">
        <Setter Property="Foreground" Value="{StaticResource ClearTextBrush}" />
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}"/>
    </Style>

    <!--#region Sélectors-->

    <!--#region Styles de selector-->

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <SolidColorBrush x:Key="Item.MouseOver.Background" Color="#1F26A0DA"/>
    <SolidColorBrush x:Key="Item.MouseOver.Border" Color="#a826A0Da"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Background" Color="#3DDADADA"/>
    <SolidColorBrush x:Key="Item.SelectedInactive.Border" Color="#FFDADADA"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="{StaticResource SelectedItemBkgnd}"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="#66000000"/>

    <!--#endregion-->

    <!--#region ListBox-->

    <SolidColorBrush x:Key="ListBox.Static.Background" Color="#FFFFFFFF"/>
    <!--<SolidColorBrush x:Key="ListBox.Static.Border" Color="#FFABADB3"/>-->
    <SolidColorBrush x:Key="ListBox.Static.Border" Color="{StaticResource CouleurContourContainer}"/>
    <SolidColorBrush x:Key="ListBox.Disabled.Background" Color="#FFFFFFFF"/>
    <SolidColorBrush x:Key="ListBox.Disabled.Border" Color="#FFD9D9D9"/>

    <Style TargetType="{x:Type ListBox}">
        <!--<Setter Property="Foreground" Value="{StaticResource ClearTextBrush}" />-->
        <Setter Property="MinHeight" Value="50"/>
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ListBox.Static.Border}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="Black"/>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Background" Value="{DynamicResource WritableBkg}"/>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="{DynamicResource WritableFocusBkgd}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="Background" Value="{DynamicResource WritableFocusBkgd}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->

    <Style TargetType="ComboBox">
        <Setter Property="Foreground" Value="{StaticResource DarkTextBrush}" />
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}"/>
        <Setter Property="Background" Value="{StaticResource WritableBkg}"/>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="{DynamicResource WritableFocusBkgd}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="Background" Value="{DynamicResource WritableFocusBkgd}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="DataGrid">
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}"/>
        <Setter Property="MinHeight" Value="50"/>
        <Setter Property="HorizontalGridLinesBrush" Value="#33FFFFFF"/>
        <Setter Property="VerticalGridLinesBrush" Value="#33FFFFFF"/>
        <Setter Property="Background" Value="{StaticResource WritableBkg}"/>
        <!--<Setter Property="RowHeaderStyle" >
            <Setter.Value>
                <Style TargetType="DataGridRowHeader">
                    <Setter Property="Background" Value="Red"/>
                    <Setter Property="Foreground" Value="{StaticResource ClearTextBrush}"/>
                    <Setter Property="Padding" Value="1"/>
                </Style>
            </Setter.Value>
        </Setter>-->
        <Setter Property="ColumnHeaderStyle" >
            <Setter.Value>
                <Style TargetType="DataGridColumnHeader">
                    <Setter Property="Background" Value="#FF555555"/>
                    <Setter Property="Foreground" Value="{StaticResource ClearTextBrush}"/>
                    <Setter Property="Margin" Value="3,1,3,1"/>
                    <Setter Property="Padding" Value="1"/>
                </Style>
            </Setter.Value>
        </Setter>
        <Setter Property="RowBackground" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{StaticResource Contour}"/>
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="Background" Value="{DynamicResource WritableFocusBkgd}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="Background" Value="{DynamicResource WritableFocusBkgd}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->

    <!--#endregion-->

    <!--#region Boutons-->

    <!--#region Couleurs pour boutons -->
    <SolidColorBrush x:Key="Button.Static.Background" Color="{StaticResource CouleurActionPossible}"/>
    <SolidColorBrush x:Key="Button.Static.Border" Color="{StaticResource CouleurActionPossible_Foncée}"/>
    <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
    <SolidColorBrush x:Key="Button.MouseOver.Foreground" Color="Orange"/>
    <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
    <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
    <SolidColorBrush x:Key="Button.Pressed.Foreground" Color="Yellow"/>
    <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
    <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
    <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
    <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
    <!--#endregion-->

    <Style x:Key="Style_BoutonRond" TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="#99FFF77A"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="{StaticResource ClearTextBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template" Value="{DynamicResource Template_BoutonRond}"/>
        <Setter Property="Margin" Value="{StaticResource SmallMargin}"/>
        <Setter Property="Height" Value="20"/>
        <Setter Property="Width" Value="20"/>
    </Style>

    <ControlTemplate x:Key="Template_BoutonRond" TargetType="{x:Type ButtonBase}">
        <Grid x:Name="Grd">
            <Ellipse x:Name="ContourContainer" 
                     Stroke="{TemplateBinding BorderBrush}" StrokeThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness.Top}" 
                     Fill="{TemplateBinding Background}" 
                     Height="{Binding ActualHeight, ElementName=Grd}" Width="{Binding ActualHeight, Mode=OneWay, RelativeSource={RelativeSource Self}}"/>
            <Border Padding="{TemplateBinding Padding}" HorizontalAlignment="Center" VerticalAlignment="Center">
                <ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding ContentTemplate}" Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Border>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter Property="Stroke" TargetName="ContourContainer" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Fill" TargetName="ContourContainer" Value="#FFBEE6FD"/>
                <Setter Property="Stroke" TargetName="ContourContainer" Value="#FF3C7FB1"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Fill" TargetName="ContourContainer" Value="#FFC4E5F6"/>
                <Setter Property="Stroke" TargetName="ContourContainer" Value="#FF2C628B"/>
            </Trigger>
            <!--<Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Fill" TargetName="ContourContainer" Value="#FFBCDDEE"/>
                <Setter Property="Stroke" TargetName="ContourContainer" Value="#FF245A83"/>
            </Trigger>-->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Fill" TargetName="ContourContainer" Value="#4CFFFFFF"/>
                <Setter Property="Stroke" TargetName="ContourContainer" Value="#FFADB2B5"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ButtonBaseControlTemplate1" TargetType="{x:Type ButtonBase}">
        <Border x:Name="border" 
                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                Background="{TemplateBinding Background}" 
                SnapsToDevicePixels="True">
            <ContentPresenter x:Name="contentPresenter" 
                              ContentTemplate="{TemplateBinding ContentTemplate}" 
                              Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                              Focusable="False" 
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Margin="{TemplateBinding Padding}" 
                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                              />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
            </Trigger>
            <!--<Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
            </Trigger>-->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" TargetName="border" Value="#4CFFFFFF"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="BoutonCarré" TargetType="{x:Type ButtonBase}">
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template" >
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border x:Name="border" 
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                            Background="{TemplateBinding Background}" 
                            SnapsToDevicePixels="True">
                        <ContentPresenter x:Name="contentPresenter" 
                              ContentTemplate="{TemplateBinding ContentTemplate}" 
                              Content="{TemplateBinding Content}" ContentStringFormat="{TemplateBinding ContentStringFormat}" 
                              Focusable="False" 
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                              Margin="{TemplateBinding Padding}" 
                              RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                              />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Button.IsDefaulted" Value="True">
                            <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFBEE6FD"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF3C7FB1"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" TargetName="border" Value="#FFC4E5F6"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FF2C628B"/>
                        </Trigger>
                        <!--<Trigger Property="ToggleButton.IsChecked" Value="True">
                <Setter Property="Background" TargetName="border" Value="#FFBCDDEE"/>
                <Setter Property="BorderBrush" TargetName="border" Value="#FF245A83"/>
            </Trigger>-->
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" TargetName="border" Value="#4CFFFFFF"/>
                            <Setter Property="BorderBrush" TargetName="border" Value="#FFADB2B5"/>
                            <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FF838383"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Button" BasedOn="{StaticResource BoutonCarré}">
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template" Value="{StaticResource Template_BoutonRond}"/>
        <Style.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="Orange"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#FF838383"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="ToggleButton" BasedOn="{StaticResource BoutonCarré}">
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}"/>
        <Setter Property="Padding" Value="1"/>
        <!--<Setter Property="Foreground" Value="Orange"/>-->
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="Template" Value="{StaticResource Template_BoutonRond}"/>
        <Style.Triggers>
            <Trigger Property="Button.IsDefaulted" Value="True">
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Foreground" Value="White"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Foreground" Value="Orange"/>
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
                <Setter Property="Foreground" Value="Orange"/>
                <Setter Property="Background" >
                    <Setter.Value>
                        <SolidColorBrush Color="{StaticResource CouleurActionPossible_Foncée}"/>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#FF838383"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--#endregion-->

    <!--#region Autres contrôles -->

    <Style TargetType="{x:Type Label}"  BasedOn="{StaticResource {x:Type Label}}">
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}"/>
        <Setter Property="Foreground" Value="{StaticResource ClearTextBrush}" />
        <Setter Property="FontStyle" Value="Italic" />
    </Style>

    <Style TargetType="ScrollViewer">
        <Setter Property="Margin" Value="{StaticResource DefaultMargin}"/>
        <Setter Property="Padding" Value="{StaticResource DefaultPadding}"/>
        <Setter Property="VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="HorizontalScrollBarVisibility" Value="Auto"/>
    </Style>

    <!--#region GridSplitter-->

    <!--<Style x:Key="GridSplitterStyle" BasedOn="{StaticResource {x:Type GridSplitter}}" TargetType="{x:Type GridSplitter}">-->
    <Style x:Key="GridSplitterStyle" TargetType="{x:Type GridSplitter}">
        <Setter Property="Background" Value="#FFFA7575"/>
    </Style>

    <Style x:Key="VerticalGridSplitter" BasedOn="{StaticResource GridSplitterStyle}" TargetType="{x:Type GridSplitter}">
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Width" Value="2"/>
        <Setter Property="Margin" Value="1,0,-1,0"/>
    </Style>

    <Style x:Key="HorizontalGridSplitter" BasedOn="{StaticResource GridSplitterStyle}" TargetType="{x:Type GridSplitter}">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Height" Value="2"/>
        <Setter Property="Margin" Value="0,4,0,-4"/>
    </Style>

    <Style TargetType="GridSplitter" BasedOn="{StaticResource HorizontalGridSplitter}"/>

    <!--#endregion-->

    <!--#endregion-->

    <!--#region UserControls-->

    <Style TargetType="UserControl">
        <Setter Property="Background" Value="{StaticResource Fond}"/>
    </Style>

    <Style TargetType="local:UC_CommandesCRUD">
        <Setter Property="Margin" Value="0"/>
    </Style>

    <!--#endregion-->

    <!--#endregion-->


</ResourceDictionary>
